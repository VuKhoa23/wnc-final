// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package internal

import (
	"github.com/VuKhoa23/advanced-web-be/internal/controller"
	"github.com/VuKhoa23/advanced-web-be/internal/controller/http"
	"github.com/VuKhoa23/advanced-web-be/internal/controller/http/middleware"
	"github.com/VuKhoa23/advanced-web-be/internal/controller/http/v1"
	"github.com/VuKhoa23/advanced-web-be/internal/database"
	"github.com/VuKhoa23/advanced-web-be/internal/database_todo"
	"github.com/VuKhoa23/advanced-web-be/internal/repository/implement"
	"github.com/VuKhoa23/advanced-web-be/internal/service/implement"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeContainer(db database.Db, db_todo database_todo.Db) *controller.ApiContainer {
	userRepository := repositoryimplement.NewUserRepository(db)
	userService := serviceimplement.NewUserService(userRepository)
	userHandler := v1.NewUserHandler(userService)
	todoRepository := repositoryimplement.NewTodoRepository(db_todo)
	todoService := serviceimplement.NewTodoService(todoRepository)
	todoHandler := v1.NewTodoHandler(todoService, userService)
	authMiddleware := middleware.NewAuthMiddleware(userRepository)
	server := http.NewServer(userHandler, todoHandler, authMiddleware)
	apiContainer := controller.NewApiContainer(server)
	return apiContainer
}

// wire.go:

var container = wire.NewSet(controller.NewApiContainer)

// may have grpc server in the future
var serverSet = wire.NewSet(http.NewServer)

// handler === controller | with service and repository layers to form 3 layers architecture
var handlerSet = wire.NewSet(v1.NewUserHandler, v1.NewTodoHandler)

var serviceSet = wire.NewSet(serviceimplement.NewUserService, serviceimplement.NewTodoService)

var repositorySet = wire.NewSet(repositoryimplement.NewUserRepository, repositoryimplement.NewTodoRepository)

var middlewareSet = wire.NewSet(middleware.NewAuthMiddleware)
